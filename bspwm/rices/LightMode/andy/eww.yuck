;; Modified   by https://github.com/gh0stzk/dotfiles

(defvar volum false)
(defvar notify false)
(defvar power false)
(defvar pac false)

;; Workspaces
(deflisten workspaces "scripts/WorkSpaces")

;; Volume vars
(defpoll volume_icon :interval "1s" "scripts/Volume --icon")
(defpoll volume_value :interval "1s" "scripts/Volume --vol")

;; Battery
(defpoll bat_icon :interval "1s" "scripts/battery icon")
(defpoll bat_value :interval "1s" "scripts/battery percent")
(defpoll bat_status :interval "1s" "scripts/battery status")

;; Network
(defpoll WIFIICON :interval "15s" `scripts/Network --icon`)
(defpoll NETSTAT :interval "15s" `scripts/Network --stat`)

;; Updates vars
(defpoll UPDATES :interval "15m" `Updates --get-updates`)

(defpoll music-player		:interval "1s" "MediaControl --player")
(defpoll music-art			:interval "3s" "MediaControl --cover")
(defpoll music-title 		:interval "1s" "MediaControl --title")
(defpoll music-artist 		:interval "1s" "MediaControl --artist")
(defpoll music-status 		:interval "1s" "MediaControl --status")
(defpoll music-position 	:interval "1s" "MediaControl --position")
(defpoll music-positions	:interval "1s" "MediaControl --positions")
(defpoll music-length 		:interval "1s" "MediaControl --length")
(defpoll music-lengths 		:interval "1s" "MediaControl --lengths")
(defpoll shuffle 			:interval "1s" "MediaControl --shuffle")
(defpoll loop 				:interval "1s" "MediaControl --loop")
(defpoll play_button		:interval "1s" `scripts/music --icon`)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Widget Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Launcher Widgets ;;
(defwidget launcher []
	(box :orientation "v"
		   :space-evenly "false"
		   :spacing -15
	  (eventbox :cursor "pointer"
		(button :class "launcher_icon"
		   	    :onclick "cd ; OpenApps --menu &"
		   	    :onrightclick "OpenApps --rice &"
		   	    "󰣇"
      )
    )
  )
)


;; Workspaces Widgets ;;
(defwidget workspaces []
	(literal :content workspaces
  )
)

(defwidget music []
	(box	:orientation "v"
			:class "music-buttons"
		(eventbox 	:cursor "pointer"
			:onhover "OpenApps --player" 
			:onhoverlost "OpenApps --player"
			(button :class "trackbutton"
			"󰝚"
			)
		)
		(eventbox 	:cursor "pointer"
			(button :class "trackbutton"
			:onclick "MediaControl --previous" 
			"󰒮"
			)
		)
		(eventbox 	:cursor "pointer"
			(button :class "playbutton"
			:onclick "MediaControl --toggle"
			{music-status == "Playing" ? "󱖐" : music-status == "Paused" ? "󱖏" : "󱖏"}
			)
		)
		(eventbox 	:cursor "pointer"
			(button :class "trackbutton"
			:onclick "MediaControl --next" 
			"󰒭"
			)
		)
		
	)
)

;; Wifi Widgets ;;
(defwidget wifi []
	(box	:orientation "v"
		(eventbox 	:cursor "pointer"
			(button :style "background-image: url('images/play-button.png');"
					:class "trayicon"
					:tooltip "${NETSTAT}"
					:onclick "OpenApps --netmanager &")
		)
	)
)

;; Setting Widgets ;;
(defwidget setting []
  (box :orientation "v"
    (eventbox :cursor "pointer"
      (button :class "setting_icon"
        :tooltip "Open Control Center"
        :onclick "OpenApps --usercard &"
        ""
      )
    )
  )
)

;; Battery Widgets ;;
(defwidget battery []
  (box :orientation "v"
    (eventbox :cursor "pointer"
      (button :class "battery_icon"
        :tooltip "${bat_status} ${bat_value}%"
        bat_icon
      )
    )
  )
)


;; control center ;;
(defwidget notifycenter []
	(eventbox	:onhover "${EWW_CMD} update notify=true"
				:onhoverlost "${EWW_CMD} update notify=false"
				:cursor "pointer"
	(box		:orientation "v"
				:space-evenly "false"
				:vexpand "false"

	(revealer	:transition "slideup"
				:reveal notify
				:duration "550ms"
	(box		:orientation "v"
				:space-evenly "false"

	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/riceselector.png');"
				:class "trayicon"
				:tooltip "Change Rice!"
				:onclick "OpenApps --rice &"))

	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/music_player.png');"
				:class "trayicon"
				:tooltip "Music Player"
				:onclick "OpenApps --player &"))

	(eventbox :cursor "pointer"
	(button		:style "background-image: url('images/usercard.png');"
				:class "trayicon"
				:tooltip "User Card"
				:onclick "OpenApps --usercard &"))))

	(button		:style "background-image: url('images/widget_apps.png');"
				:class "trayicon"
				:tooltip "Widgets"))))



;; Pacman Widgets ;;
(defwidget pacman []
	(eventbox	:onhover "${EWW_CMD} update pac=true"
				:onhoverlost "${EWW_CMD} update pac=false"
	(box		:orientation "v"
				:space-evenly "false"
				:vexpand "false"

	(revealer	:transition "slideup"
				:reveal pac
				:duration "550ms"
	(box		:orientation "v"
				:space-evenly "false"

	(label  	:class "bar-updates-text"
				:text "${UPDATES}")))

	(eventbox   :cursor "pointer"
	(button		:style "background-image: url('images/pac_man.png');"
				:class "trayicon"
				:onrightclick "OpenApps --checkupdates &"
				:onclick "OpenApps --update &")))))


;; Volume Widgets ;;
(defwidget volum []
	(eventbox :onhover "${EWW_CMD} update volum=true"
			  :onhoverlost "${EWW_CMD} update volum=false"
			  :cursor "pointer"
	(box      :orientation "v"
			  :space-evenly "false"
			  :spacing "2"
	(revealer :transition "slideup"
			  :reveal volum
			  :duration "550ms"
	(scale    :class "volbar"
			  :value {volume_value ?: "0"}
			  :onchange "pamixer --set-volume {}"
			  :orientation "v"
			  :flipped true
			  :tooltip "Volume: ${volume_value}%"
			  :max 101
			  :min 0))
	(button   :style "background-image: url('${volume_icon}');"
			  :class "trayicon"
			  :onrightclick "OpenApps --soundcontrol &"
			  :onclick "scripts/Volume --toggle-muted &"))))

;; Clock Widgets ;;
(defwidget time []
	(box	:orientation "v" 
			:class "time" 
			:valign "end"
	(eventbox :cursor "pointer"
	(button	:onclick "OpenApps --calendar &"
			:class "time-hour" "${formattime(EWW_TIME, "%H")}"))
	(eventbox :cursor "pointer"
	(button	:onclick "OpenApps --calendar &"
			:class "time-min" "${formattime(EWW_TIME, "%M")}"))))


;; Powermenu Widgets ;;
(defwidget power []
	(eventbox	:onhover "${EWW_CMD} update power=true"
				:onhoverlost "${EWW_CMD} update power=false"
				:cursor "pointer"

	(box	:orientation "v"
			:space-evenly "false"
			:vexpand "false"
			:class "powermenu"

	(revealer	:transition "slideup"
				:reveal power
				:duration "550ms"

	(box	:orientation "v"
			:space-evenly "false"

	(button	:style "background-image: url('images/enpass.png');"
			:class "button-lock"
			:tooltip "Lock Screen"
			:onclick "physlock -d")

	(button :style "background-image: url('images/sys-sleep.png');"
			:class "button-bspres"
			:tooltip "Suspend computer"
			:onclick "systemctl suspend")

	(button	:style "background-image: url('images/sys-reboot.png');"
			:class "button-reb"
	  		:tooltip "Reboot"
			:onclick "reboot")

	(button	:style "background-image: url('images/sys-poweroff.png');"
			:class "button-off"
			:tooltip "Shutdown"
			:onclick "shutdown now")))

	(button	:style "background-image: url('images/sys-powermenu.png');"
			:class "button-powermenu"
			:tooltip "Power Menu"))))


;; Systray widget ;;
(defwidget systemtray []
  (box :orientation "v" :halign "center"
    (systray :class "tray" :orientation "v" :icon-size 40 :spacing 10)
  )
)


;; Top Widgets ;;
(defwidget top []
	(box	:orientation "v"
			:space-evenly "false"
			:valign "start"
(launcher)
(workspaces)
))

;; Mid Widgets ;;

(defwidget mid []
	(box	:orientation "v"
			:space-evenly "false"
			:valign "center"
(music)
))

;; Bottom Widgets ;;
(defwidget bottom []
	(box	:orientation "v"
			:space-evenly "false"
(battery)
(setting)
(time)
))

;; Control Panel Widgets ;;
(defwidget control []
	(box :orientation "v"
		 :space-evenly false 
		 :class "control"
(notifycenter)
(volum)
(wifi)
(pacman)))

;; End Widgets ;;
(defwidget end []
	(box :orientation "v"
		 :space-evenly "false"
		 :valign "end"
		 :spacing 5
(bottom)))

;; Bar Widgets ;;
(defwidget bar []
	(box :class "eww_bar tray"
		 :orientation "v"
		 :vexpand "false"
		 :hexpand "false"
(top)
(mid)
(end)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;							Window Section's							 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defwindow bar
	:geometry (geometry :x "10px"
						:y "0%"
						:anchor "left center"
						:height "90%"
						:width "47px")
	:reserve (struts :distance "5px"
					 :side "left")
	:wm-ignore false
	(bar))
